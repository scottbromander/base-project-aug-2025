name: base-project

services:
  db:
    image: postgres:16-alpine
    environment:
      # Superuser for container init (used by ensure-db)
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgrespass}
    ports:
      - '55432:5432' # host:container (avoid local PG clashes)
    volumes:
      - pgdata:/var/lib/postgresql/data
      # First-boot initializer (safe on a fresh volume)
      # db/init.sql should contain ONLY:
      #   CREATE ROLE appuser WITH LOGIN PASSWORD 'apppass';
      #   CREATE DATABASE appdb OWNER appuser;
      - ./db/init.sql:/docker-entrypoint-initdb.d/00_init.sql:ro
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -d postgres']
      interval: 3s
      timeout: 3s
      retries: 20

  # Idempotent safety net: ensures role/db & password every boot (handles reused volumes)
  ensure-db:
    image: postgres:16-alpine
    depends_on:
      db:
        condition: service_healthy
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD:-postgrespass}
    entrypoint: ['/bin/sh', '-lc']
    command: |
      set -e
      until pg_isready -h db -U postgres -d postgres >/dev/null 2>&1; do sleep 1; done
      # ensure role exists
      psql -h db -U postgres -d postgres -tAc "SELECT 1 FROM pg_roles WHERE rolname='appuser'" | grep -q 1 \
        || psql -h db -U postgres -d postgres -c "CREATE ROLE appuser WITH LOGIN;"
      # enforce known password (idempotent)
      psql -h db -U postgres -d postgres -c "ALTER ROLE appuser WITH PASSWORD 'apppass';"
      # ensure database exists
      psql -h db -U postgres -d postgres -tAc "SELECT 1 FROM pg_database WHERE datname='appdb'" | grep -q 1 \
        || psql -h db -U postgres -d postgres -c "CREATE DATABASE appdb OWNER appuser;"

  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql+psycopg://appuser:apppass@db:5432/appdb
      CORS_ORIGINS: http://localhost:5173
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - ./backend:/app
    ports:
      - '8000:8000'
    depends_on:
      db:
        condition: service_healthy
      ensure-db:
        condition: service_completed_successfully

  web:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: dev # ensure your frontend/Dockerfile has a "dev" stage
    environment:
      VITE_API_URL: http://localhost:8000
      # optional: avoid rollup native binary issues across platforms
      ROLLUP_SKIP_NODEJS_NATIVE: 'true'
    volumes:
      - ./frontend:/usr/src/app
      - web_node_modules:/usr/src/app/node_modules # container-only deps (decoupled from host)
    ports:
      - '5173:5173'
    # First run will populate the node_modules volume; later runs skip the install
    command: >
      sh -lc "[ -d node_modules ] || npm ci;
      npm run dev -- --host 0.0.0.0"
    depends_on:
      - api

volumes:
  pgdata:
  web_node_modules:
